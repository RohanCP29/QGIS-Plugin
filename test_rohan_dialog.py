# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Test_RohanDialog
                                 A QGIS plugin
 A plugin that uploads and visualizes point, line, and polygon shapefiles


 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-07-15
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Rohan Patil
        email                : rohanpatil4002@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from qgis.PyQt import uic, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QMessageBox
from qgis.core import QgsVectorLayer, QgsProject

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'test_rohan_dialog_base.ui'))


class Test_RohanDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        super(Test_RohanDialog, self).__init__(parent)
        self.setupUi(self)
        
        self.frame_2.setVisible(False)
        
        self.inputFile.clicked.connect(self.show_frame)

        self.paths = {"point": None, "line": None, "polygon": None}
        self.layers = {"point": None, "line": None, "polygon": None}

        # Store checkbox
        self.checkboxes = {
            "point": self.checkBoxPoint,
            "line": self.checkBoxLine,
            "polygon": self.checkBoxPolygon
        }

        self.selectPoint.clicked.connect(lambda: self.select_shapefile("point"))
        self.selectLine.clicked.connect(lambda: self.select_shapefile("line"))
        self.selectPolygon.clicked.connect(lambda: self.select_shapefile("polygon"))

        self.uploadPoint.clicked.connect(lambda: self.upload_shapefile("point"))
        self.uploadLine.clicked.connect(lambda: self.upload_shapefile("line"))
        self.uploadPolygon.clicked.connect(lambda: self.upload_shapefile("polygon"))

        self.checkBoxPoint.stateChanged.connect(lambda state: self.toggle_layer("point", state))
        self.checkBoxLine.stateChanged.connect(lambda state: self.toggle_layer("line", state))
        self.checkBoxPolygon.stateChanged.connect(lambda state: self.toggle_layer("polygon", state))

        self.labelInfoPoint.mousePressEvent = lambda event: self.show_info("Point")
        self.labelInfoLine.mousePressEvent = lambda event: self.show_info("Line")
        self.labelInfoPolygon.mousePressEvent = lambda event: self.show_info("Polygon")

    def show_frame(self):
        """Show the shapefile upload frame."""
        self.frame_2.setVisible(True)

    def select_shapefile(self, file_type):
        """Select a shapefile for the given type (point, line, polygon)."""
        path, _ = QFileDialog.getOpenFileName(
            self, f"Select {file_type.capitalize()} Shapefile", "", "Shapefiles (*.shp)"
        )

        if not path:
            QMessageBox.warning(self, "No Selection", f"No shapefile selected for {file_type}.")
            return

        if path in self.paths.values():
            QMessageBox.warning(self, "Duplicate File", "This file is already selected. Please choose a different one.")
            return

        self.paths[file_type] = path
        QMessageBox.information(self, "Selected", f"{file_type.capitalize()} file selected:\n{path}")

    def upload_shapefile(self, file_type):
        """Upload selected shapefile to QGIS."""
        path = self.paths.get(file_type)

        if not path:
            QMessageBox.warning(self, "No File", f"Please select a {file_type} shapefile before uploading.")
            return

        if self.layers.get(file_type):
            QMessageBox.information(self, "Already Uploaded", f"{file_type.capitalize()} shapefile already uploaded. Please select another file.")
            return

        if os.path.exists(path):
            layer = QgsVectorLayer(path, f"{file_type.capitalize()} Layer", "ogr")
            if layer.isValid():
                QgsProject.instance().addMapLayer(layer)
                self.layers[file_type] = layer
                self.checkboxes[file_type].setChecked(True)
                QMessageBox.information(self, "Uploaded", f"{file_type.capitalize()} shapefile uploaded successfully!")
                self.paths[file_type] = None 
            else:
                QMessageBox.critical(self, "Error", "Failed to load shapefile.")
        else:
            QMessageBox.warning(self, "Invalid File", "The selected file path does not exist.")

    def toggle_layer(self, file_type, state):
        """Toggle visibility of layer based on checkbox."""
        layer = self.layers.get(file_type)
        if not layer:
            return
        node = QgsProject.instance().layerTreeRoot().findLayer(layer.id())
        if node:
            node.setItemVisibilityChecked(bool(state))

    def show_info(self, file_type):
        """Show an information box for expected input format."""
        QMessageBox.information(self, f"{file_type} Info", f"Please upload a valid .shp file for {file_type.lower()}.")
